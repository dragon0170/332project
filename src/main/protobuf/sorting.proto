syntax = "proto3";

package cs332.distributedsorting;

service Sorting {
  rpc Handshake (HandshakeRequest) returns (HandshakeResponse) {}
  rpc SendSampledData (SendSampledDataRequest) returns (SendSampledDataResponse){}
  rpc SetSlaveServerPort (SetSlaveServerPortRequest) returns (SetSlaveServerPortResponse) {}
  rpc SendNumFiles (SendNumFilesRequest) returns (SendNumFilesResponse) {}
  rpc NotifyMergingCompleted (NotifyMergingCompletedRequest) returns (NotifyMergingCompletedResponse) {}
}

message SendSampledDataRequest {
  int32 id= 1;
  bytes data = 2;
}

message SendSampledDataResponse {
  message KeyRanges {
    bytes lower_bound = 1;
    bytes upper_bound = 2;
  }
  bool ok = 1;
  map<int32, KeyRanges> id_to_key_ranges = 2;
}

message HandshakeRequest {
  string ipAddress = 1;
}

message HandshakeResponse {
  bool ok = 1;
  int32 id = 2;
}

message SetSlaveServerPortRequest {
  int32 id = 1;
  int32 port = 2;
}

message SetSlaveServerPortResponse {
  bool ok = 1;
  map<int32, string> id_to_server_endpoint = 2;
}

message SendNumFilesRequest {
  int32 id = 1;
  int32 num = 2;
}

message SendNumFilesResponse {
  bool ok = 1;
  int32 startIndex = 2;
  int32 length = 3;
}

message NotifyMergingCompletedRequest {
  int32 id = 1;
}

message NotifyMergingCompletedResponse {
  bool ok = 1;
}

// service for slave server
service Shuffling {
  rpc SendSortedFiles (stream SendSortedFileRequest) returns (stream SendSortedFileResponse) {}
}

message SendSortedFileRequest {
  bytes file = 1;
}

message SendSortedFileResponse {
  bool ok = 1;
}
